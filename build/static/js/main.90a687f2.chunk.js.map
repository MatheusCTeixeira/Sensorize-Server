{"version":3,"sources":["Comunication/DataSource.ts","Chart/ChartController.ts","Comunication/Chart.ts","Chart/ChartEditView.tsx","Chart/ChartDeleteView.tsx","Chart/ChartVisualize.tsx","Chart/ChartCard.tsx","Chart/ChartAddView.tsx","mock.ts","Chart/ChartView.tsx","DataSource/DataSourceDeleteView.tsx","DataSource/DataSourceController.ts","Types/DataSourceStatus.ts","DataSource/DataSourceEditView.tsx","Comunication/Data.ts","DataSource/DataSourceTest.tsx","DataSource/DataSourceCard.tsx","DataSource/DataSourceAddView.tsx","DataSource/DataSourceView.tsx","Comunication/Login.ts","Login/RegisterPrompt.tsx","Login/LoginPrompt.tsx","Login/LoginScreen.tsx","Menus.tsx","Intro.tsx","Graph/ColorList.ts","Graph/Chart.tsx","Graph/RegressionChart.tsx","Graph/Statistic.tsx","Chart/DisplaySensor.tsx","Components/AvatarPreview.tsx","Home/Home.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["baseAddr","fetchAllDataSources","axios","get","withCredentials","headers","then","res","Promise","resolve","data","catch","reject","ChartController","label","chartType","dataSources","bufferSize","findDataSourceById","id","checkForNullInputs","current","readInput","value","parseInt","Array","from","selectedOptions","map","_","buffer","fetchDataSources","this","React","createRef","baseAddress","ChartEdit","props","state","controller","componentDidMount","setState","error","NotificationManager","editChart","msg","Error","chart","put","updateChart","updatedChart","editCallback","success","err","hideModal","showModal","modal","listDataSources","dataSource","i","key","makeBody","Form","Group","controlId","FormLabel","type","className","placeholder","defaultValue","ref","FormText","multiple","toString","Modal","show","onHide","Header","Body","Footer","Button","variant","onClick","Component","ChartDelete","removeChart","delete","status","deleteCallback","ChartVisualize","to","ChartCard","reduce","ChartPrompt","add","forEach","post","addChart","addedChart","addCallback","makeAddBody","Label","Text","closeButton","Title","dataType","ipAddress","port","sampleFrequency","charts","Chart","componentWillUnmount","mock","push","_chart","deleteChart","filter","makeList","JSON","stringify","DataSourceDelete","DataSourceController","parseFloat","EStatus","DataSourceEdit","edit","editDtSrc","updatedDataSource","step","ModalBody","ModalFooter","fetch","lastSampleTime","Date","lastRequest","ip","url","response","uptime","DataSourceTest","fetchDataSourceStatus","sensorStatus","Off","requestPerHour","toLocaleDateString","DataSourceCard","DataSourcePrompt","addDataSource","addedDataSource","FormGroup","render","ModalTitle","DataSource","editDataSource","_dataSource","deleteDataSource","getUserData","user","avatar","RegisterPrompt","regName","regEmail","regPassword","regAvatar","getRegisterData","formData","FormData","append","files","registerUser","a","userData","statusCode","warning","showAvatar","fileReader","FileReader","readAsDataURL","onload","e","img","document","getElementById","result","target","setAttribute","htmlFor","onChange","LoginPrompt_","loginEmail","loginPassword","getLoginData","email","password","login","credentials","console","log","history","LoginPrompt","withRouter","LoginScreen","leaveTimeout","enterTimeout","autoPlay","muted","loop","src","Menus_","fetchUserData","name","logout","Menus","Intro","href","Color","red","green","blue","alpha","light","dark","Colors","Graph","canvas","viewChart","options","timeID","needToUpdate","timerID","setupData","nOfDtSrc","labels","datasets","backgroundColor","c","borderColor","borderWidth","fill","lineTension","setupOptions","showAxis","mappedType","scales","yAxes","ticks","beginAtZero","gridLines","display","xAxes","mappedCategory","time","unit","callback","index","values","nValues","length","Math","floor","hover","animationDuration","legend","position","layout","padding","animation","duration","title","text","fontSize","ctx","getContext","subscripton","updateGraphData","setInterval","updateGraph","clearInterval","pieDataParse","lineDataParse","barDataParse","scatterDataParse","update","style","width","height","defaults","global","defaultFontFamily","defaultFontColor","viewChartData","findIndex","lbl","dataSourceLabel","dataset","idx","y","P","point","x","olderTime","dt","getTime","oldData_","Set","dataSample","RegressionChart","chartView","context","showLine","bottom","updateChartData","parseToForecast","parseFromForecast","getStimatedValues","parsedData","t","timeseries","max","min","mean","stdev","forecast","dataAnalysed","curr","currDate","prevDate","slice","colSpan","undefined","delta","diff","prev","coefficients","len","dataLen","output","inputData","degree","pointToForecast","v","dT","getDeltaTime","currentData","coeff","ARMaxEntropy","convolve","lastDate","newPoint","Statistic","storeData","dataSourcesData","addRegression","role","DisplaySensor","subscribers","lastDataFetched","Map","dataSourceRequestTimer","startSampling","fetchData","match","params","fetchBar","has","set","sample","notifyAll","fetchTimeseries","dataSamples","subscribe","subscriber","AvatarPreview","startsWith","onSelected","defaultImage","Home","setAvatar","file","extractData","updatedData","userUpdated","textAlign","App","createBrowserHistory","exact","path","component","Boolean","window","location","hostname","ReactDOM","basename","forceRefresh","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90a687f2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { IDataSource } from \"../Types/DataSourceType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// Para propósitos de teste apenas.\n// const baseAddr = \"http://localhost:5000\";\nconst baseAddr = \"\";\n\n// Busca os dados de uma Data Source específica.\nexport function fetchDataSource(id: number): Promise<IDataSource> {\n    return (\n    axios.get(`/api/datasources/${id}`, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n}\n\n// Busca os dados de todas as Data Sources relacionadas com o usuário logado.\nexport function fetchAllDataSources() : Promise<IDataSource[]> {\n\n    return axios.get(baseAddr + `/api/datasources/`, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\",\n        }\n    }).then(res => Promise.resolve(res.data))\n    .catch(Promise.reject);\n}\n\n// Adiciona a Data Source. Retorna a Data Source com o ID válido.\nexport function addDataSource(dataSource: IDataSource) : Promise<IDataSource> {\n    delete dataSource.id;\n    return (\n    axios.post(baseAddr + `/api/datasources/`, dataSource, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n}\n\n// Edita os dados da Data Source específicada.\nexport function updateDataSource\n    (dataSource: Partial<IDataSource>)\n    : Promise<IDataSource> {\n\n    return (\n    axios.put(baseAddr + `/api/datasources/${dataSource.id}`, dataSource, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n}\n\n// Remove a Data Source que possui ID específicado.\nexport function deleteDataSource(id: number): Promise<boolean> {\n    return (\n    axios.delete(baseAddr + `/api/datasources/${id}`, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.status === 200))\n    .catch(Promise.reject)\n    );\n}\n","import React from \"react\";\n\nimport { IChart } from \"../Types/ChartType\";\nimport { IDataSource } from \"../Types/DataSourceType\";\n\nimport * as mock from \"../mock\";\nimport { fetchAllDataSources } from \"../Comunication/DataSource\";\n\nexport class ChartController {\n    label      : React.RefObject<HTMLInputElement> ;\n    chartType  : React.RefObject<HTMLSelectElement>;\n    dataSources: React.RefObject<HTMLSelectElement>;\n    bufferSize : React.RefObject<HTMLInputElement> ;\n\n    constructor() {\n        this.label       = React.createRef();\n        this.chartType   = React.createRef();\n        this.dataSources = React.createRef();\n        this.bufferSize  = React.createRef();\n    }\n\n    findDataSourceById = (id: number) => {\n        return {\n            id: id,\n            label: `Sensor #${id}`\n        } as IDataSource;\n    }\n\n    checkForNullInputs = () => {\n        return !(\n            this.label.current       != null &&\n            this.chartType.current   != null &&\n            this.dataSources.current != null &&\n            this.bufferSize.current  != null\n        );\n    }\n\n    readInput = () => {\n        const label       = this.label.current.value;\n        const chartType   = this.chartType.current.value;\n        const bufferSize  = parseInt(this.bufferSize.current.value);\n        const dataSources = (\n            Array.from(this.dataSources.current.selectedOptions).map(\n                _ => parseInt(_.value)\n            ));\n\n        const chart: IChart = {\n            id         : null,\n            label      : label,\n            chartType  : chartType,\n            dataSources: dataSources.map(_ => this.findDataSourceById(_)),\n            buffer     : bufferSize,\n        };\n\n        return chart;\n    }\n\n    fetchDataSources = () => {\n        return fetchAllDataSources();\n    }\n\n\n\n}","import { IChart } from \"../Types/ChartType\";\nimport axios from \"axios\";\n\nimport * as mock from \"../mock\";\n\n// const baseAddress = \"http://localhost:5000\";\nconst baseAddress = \"\";\n/* ────────────────────────────────────────────────────────────────────────── */\n\nexport function fetchChart(id: number): Promise<IChart> {\n    return (\n        axios.get(baseAddress + \"/api/charts/\" + id, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\"\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n\n    /*  return mock.charts.filter(\n        chart => chart.id === id\n    )[0]; */\n}\n\n// Busca todos as Charts que o usuário logado possui.\nexport function fetchAllCharts() : Promise<IChart[]> {\n    return (\n        axios.get(baseAddress + \"/api/charts\", {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\"\n        }\n    })\n    .then(res => Promise.resolve(res.data as IChart[]))\n    .catch(Promise.reject)\n    );\n}\n\n// Cadastra um Chart no servidor. Retorna o Chart com o id modificado.\nexport function addChart(chart: IChart) : Promise<IChart> {\n    delete chart.id; // Não é necessário possuir um ID.\n    chart.dataSources.forEach(dataSource => dataSource.id);\n\n    return (\n    axios.post(baseAddress + \"/api/charts\", chart, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n}\n\n// Atualiza os dados de um Chart específico.\nexport function updateChart(chart: Partial<IChart>) : Promise<IChart> {\n\n    return (\n    axios.put(baseAddress + `/api/charts/${chart.id}`, chart, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\"      : \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.data))\n    .catch(Promise.reject)\n    );\n}\n\n// Deleta um chart do usuário.\nexport function deleteChart(id: number) : Promise<boolean> {\n    return (\n    axios.delete(baseAddress + `/api/charts/${id}`, {\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n    })\n    .then(res => Promise.resolve(res.status === 200))\n    .catch(Promise.reject)\n    );\n}","import React from \"react\";\nimport { Button, Modal, FormLabel, FormText } from \"react-bootstrap\";\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport { IChart } from \"../Types/ChartType\";\nimport { Form } from \"react-bootstrap\";\n\nimport { ChartController } from \"./ChartController\";\nimport { updateChart } from \"../Comunication/Chart\";\nimport { IDataSource } from \"../Types/DataSourceType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    chart: IChart,\n    editCallback: (chart: IChart) => any;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    modal: boolean,\n    dataSources?: IDataSource[]\n}\n\n// Esta classe é responsável pela edição dos dados de um Chart.\nexport default class ChartEdit extends React.Component<IProps, IState> {\n    state      : IState;\n    controller : ChartController = new ChartController();\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, modal: false, };\n\n    }\n\n    componentDidMount = () => {\n        this.controller.fetchDataSources()\n        .then(dataSources => {\n            this.setState({\n                dataSources: dataSources\n            });\n        })\n        .catch(error => {\n            NotificationManager.error(\"Could not load Data Sources!\");\n        });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    editChart: () => void = () => {\n        if (this.controller.checkForNullInputs()) {\n            const msg = \"Invalid Input Fields\";\n\n            NotificationManager.error(msg);\n            throw Error(msg);\n        }\n\n        // TEST testar comunicação.\n        let chart: IChart = this.controller.readInput();\n        chart.id = this.state.chart.id;\n\n        updateChart(chart)\n        .then(updatedChart => {\n            chart = updatedChart;\n            this.props.editCallback(chart);\n\n            NotificationManager.success(\"Chart updated!\");\n        })\n        .catch(err => {\n            NotificationManager.error(\"Could not update Chart!\");\n        })\n\n        this.hideModal();\n    }\n\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    showModal = () => {\n        this.setState({modal: true});\n    }\n\n    hideModal = ()  => {\n        this.setState({ modal: false });\n    }\n\n    listDataSources = () => {\n        return this.state.dataSources.map(\n            (dataSource, i) => (\n                <option\n                    key={i}\n                    value={dataSource.id}>\n                    {dataSource.label}\n                </option>)\n        )\n    }\n\n    makeBody = ()=> {\n        return (<>\n        <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n\n            <FormLabel>Label</FormLabel>\n            <input\n                type         = \"text\"\n                className    = \"form-control\"\n                placeholder  = \"Chart Label\"\n                defaultValue = {this.state.chart.label}\n                ref          = {this.controller.label}/>\n            <FormText className=\"text-muted\">\n            Chart Label. Eg. Chart #1\n            </FormText>\n\n            <FormLabel>Chart Type</FormLabel>\n            <select\n                className=\"form-control\"\n                defaultValue={this.state.chart.chartType}\n                ref={this.controller.chartType}>\n                <option value=\"Bar Chart\">Bar Chart</option>\n                <option value=\"Line Chart\">Line Chart</option>\n                <option value=\"Pie Chart\">Pie Chart</option>\n                <option value=\"Scatter Plot\">Scatter Plot</option>\n            </select>\n            <FormText className=\"text-muted\">\n            Chart Type. Eg. Line Chart, Pie Chart, ...\n            </FormText>\n\n            <FormLabel>Data Sources</FormLabel>\n            <select multiple\n                className=\"form-control\"\n                defaultValue={\n                    this.state.chart.dataSources.map(_ => _.id.toString())\n                }\n                ref={this.controller.dataSources}>\n                {this.listDataSources()}\n            </select>\n            <FormText className=\"text-muted\">\n            Data Source to be ploted. Eg. Sensor #1, ...\n            </FormText>\n\n            <FormLabel>Buffer Size</FormLabel>\n            <input\n                type=\"number\"\n                placeholder=\"Buffer Size\"\n                className=\"form-control\"\n                ref={this.controller.bufferSize}\n                defaultValue={this.state.chart.buffer.toString()} />\n            <FormText className=\"text-muted\">\n            The buffer size. Eg. 150 samples.\n            </FormText>\n        </Form.Group>\n        </Form>\n        </>);\n    }\n\n    render(): React.ReactNode {\n        if (!this.state.dataSources) return null;\n        return (<>\n        <Modal show={this.state.modal} onHide={this.hideModal}>\n            <Modal.Header>\n                { this.state.chart.label }\n            </Modal.Header>\n            <Modal.Body>\n                { this.makeBody() }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                    Cancel\n                </Button>\n\n                <Button\n                    variant=\"warning\"\n                    onClick={this.editChart}>\n                    Save\n                </Button>\n            </Modal.Footer>\n        </Modal>\n\n        <Button\n            className=\"btn btn-light text-warning  mx-2 tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons\">edit</i>\n            <span className=\"tooltiptext\">Edit Data Source</span>\n        </Button>\n        </>);\n    }\n}","import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport { IChart } from \"../Types/ChartType\";\nimport { deleteChart } from \"../Comunication/Chart\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    chart: IChart,\n    deleteCallback: (chart: IChart) => any,\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    modal: boolean,\n}\n\n// Esta classe é responsável pela remoção de Charts.\nexport default class ChartDelete extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, modal: false};\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    removeChart = () => {\n        const chart = this.state.chart;\n\n        // TEST Testar comunicação com o servidor.\n        deleteChart(chart.id)\n        .then(res => {\n            if (!res)\n                throw new Error(\"Could not delete Chart!\");\n\n            this.props.deleteCallback(chart);\n        })\n        .catch(err => {\n            NotificationManager.error(\"Could not delete Chart!\");\n        });\n\n        this.hideModal();\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    showModal = () => {\n        this.setState({modal: true});\n    }\n\n    hideModal = () => {\n        this.setState({modal: false});\n    }\n\n    render(): React.ReactNode {\n        return (<>\n        <Modal show={this.state.modal} onHide={this.hideModal}>\n            <Modal.Header>\n                { this.state.chart.label }\n            </Modal.Header>\n            <Modal.Body>\n                <h4>\n                    Are you sure?\n                </h4>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\"\n                    onClick={this.hideModal}>\n                    Cancel\n                </Button>\n\n                <Button variant=\"danger\"\n                    onClick={this.removeChart}>\n                    Delete\n                </Button>\n            </Modal.Footer>\n        </Modal>\n        <Button\n            className=\"btn btn-light text-danger mx-2 tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons\">delete_forever</i>\n            <span className=\"tooltiptext\">Delete Data Source</span>\n        </Button>\n        </>);\n    }\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { IChart } from \"../Types/ChartType\";\nimport { Button } from \"react-bootstrap\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    chart: IChart,\n};\n\n// A interface IState.\ninterface IState extends IProps {\n};\n\n// Esta classe é responsável pela visualização de um Chart. Isto inclue\n// a plotagem, o query aos sensores e, se necessário, calculos estátisticos\n// para a predição de dados.\nexport default class ChartVisualize extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = props;\n    }\n\n    render(): React.ReactNode {\n        return (<>\n        <Link\n            to={`/chart/${this.state.chart.id}`}\n            className=\"btn text-primary tootiped-component\">\n            <Button\n                className=\"btn btn-light text-primary tootiped-component\"\n                >\n            <i className=\"material-icons\">remove_red_eye</i>\n            <span className=\"tooltiptext\">Visualize Chart</span>\n            </Button>\n        </Link>\n        </>);\n    }\n}","import React       from \"react\"        ;\nimport ChartEdit   from \"./ChartEditView\"  ;\nimport ChartDelete from \"./ChartDeleteView\";\n\nimport { IChart } from \"../Types/ChartType\";\n\nimport ChartVisualize from \"./ChartVisualize\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    chart: IChart,\n    editCallback: (chart: IChart) => any;\n    deleteCallback: (chart: IChart) => any;\n};\n\n// A interface IState.\ninterface IState extends IProps {\n    chart: IChart;\n};\n\n// Esta classe é responsável pela exibição dos Cards dos Charts cadastrados.\nexport default class ChartCard extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = props;\n    }\n\n    public render() {\n        return (\n        <div className=\"card m-4 chart-card\">\n        <h5 className=\"card-header\">{this.state.chart.label}</h5>\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">Chart features:</h5>\n            <div className=\"card-text w-100\">\n                <table className=\"chart-features\">\n                    <tbody>\n                    <tr>\n                        <td>Label</td>\n                        <td>{this.state.chart.label}</td>\n                    </tr>\n                    <tr>\n                        <td>Data Sources</td>\n                        <td>{this.state.chart.dataSources.map(_ => _.label).reduce(\n                            (_, dataSource) => _ + \", \" + dataSource)}</td>\n                    </tr>\n                    <tr>\n                        <td>Chart Type</td>\n                        <td>{this.state.chart.chartType}</td>\n                    </tr>\n                    <tr>\n                        <td>Chart Buffer</td>\n                        <td>{this.state.chart.buffer}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <ChartDelete\n                chart={this.state.chart}\n                deleteCallback={this.props.deleteCallback}/>\n\n            <ChartEdit\n                chart={this.state.chart}\n                editCallback={this.props.editCallback}/>\n\n            <ChartVisualize\n                chart={this.state.chart} />\n        </div>\n        </div>);\n    }\n}","import React from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\n\nimport { ChartController } from \"./ChartController\";\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport { IChart } from \"../Types/ChartType\";\nimport { addChart } from \"../Comunication/Chart\";\nimport { IDataSource } from \"../Types/DataSourceType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    addCallback: (chart: IChart) => any;\n};\n\n// A interfaxe IState.\ninterface IState extends IProps {\n    show: boolean,\n    dataSources?: IDataSource[],\n}\n\n// Esta classe é responsável por adicionar Charts.\nexport default class ChartPrompt\n    extends React.Component<IProps, IState> {\n    state      : IState                            ;\n    controller: ChartController = new ChartController();\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, show: false };\n    }\n\n    componentDidMount = () => {\n        this.controller.fetchDataSources()\n        .then(dataSources => {\n            this.setState({\n                dataSources: dataSources,\n            });\n        })\n        .catch(error => {\n                NotificationManager.error(\"Could not load Data Sources!\");\n        });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    // Exibe o menu.\n    showModal: () => void = () => {\n        this.setState({show: true});\n    }\n\n    // Esconde o menu.\n    hideModal: () => void = () => {\n        this.setState({show: false});\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n\n    // Adiciona os dados do Chart no Banco de Dados, Atualiza o ID do Chart e\n    // Adiciona na lista de charts.\n    add: () => void = () => {\n        if (this.controller.checkForNullInputs())\n            throw Error(\"Invalid Input Fields\");\n\n        let chart = this.controller.readInput();\n        this.hideModal();\n\n        // TEST testar a comunicação.\n        addChart(chart)\n        .then(addedChart => {\n            chart = addedChart;\n            this.props.addCallback(chart);\n\n            NotificationManager.success(\"Chart Added!\");\n        })\n        .catch(err => {\n            NotificationManager.error(\"Could not add Chart!\");\n        });\n    }\n\n    listDataSources: () => React.ReactNode[] = () => {\n        return this.state.dataSources.map(\n            (_, i) => <option key={i} value={_.id}>{_.label}</option>\n        )\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    makeAddBody: () => React.ReactNode = () => <>\n        <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n\n            <Form.Label>Label</Form.Label>\n            <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"Chart Label\"\n                ref={this.controller.label}\n                />\n            <Form.Text className=\"text-muted\">\n            Chart Label. Eg. Chart #1\n            </Form.Text>\n\n            <Form.Label>Chart Type</Form.Label>\n            <select\n                className=\"form-control\"\n                ref={this.controller.chartType}>\n                    <option value = \"Bar Chart\"    >Bar Chart   </option>\n                    <option value = \"Line Chart\"   >Line Chart  </option>\n                    <option value = \"Pie Chart\"    >Pie Chart   </option>\n                    <option value = \"Scatter Plot\">Scatter Plot</option>\n            </select>\n            <Form.Text className=\"text-muted\">\n            Chart Type. Eg. Line Chart, Pie Chart, ...\n            </Form.Text>\n\n            <Form.Label>Data Sources</Form.Label>\n            <select multiple\n                className=\"form-control\"\n                ref={this.controller.dataSources}>\n                { this.listDataSources() }\n            </select>\n            <Form.Text className=\"text-muted\">\n            Data Source to be ploted. Eg. Sensor #1, ...\n            </Form.Text>\n\n            <Form.Label>Buffer Size</Form.Label>\n            <input\n                type=\"number\"\n                placeholder=\"Buffer Size\"\n                className=\"form-control\"\n                ref={this.controller.bufferSize}/>\n            <Form.Text className=\"text-muted\">\n            The buffer size. Eg. 150 samples.\n            </Form.Text>\n        </Form.Group>\n        </Form>\n    </>;\n\n    render(): React.ReactNode {\n        if (this.state.dataSources == null) return null;\n        return (<>\n        <div\n            className=\"add-component tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons md-48\">add_circle_outline</i>\n            <span className=\"tooltiptext\">Add Chart</span>\n        </div>\n\n        <Modal show={this.state.show} onHide={this.hideModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Chart</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n            { this.makeAddBody() }\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                        Cancel\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={this.add}>\n                        Add\n                </Button>\n            </Modal.Footer>\n        </Modal>\n        </>);\n    }\n}","import { IChart } from \"./Types/ChartType\";\nimport { IDataSource } from \"./Types/DataSourceType\";\n\nconst randomInt = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nlet dataSources: IDataSource[] = [\n    {\n        id       : 1,\n        dataType : \"Continuous\",\n        ipAddress: \"127.0.0.1\",\n        port     : 3001,\n        label    : \"Sensor #1\",\n        sampleFrequency: 0.5,\n    } as IDataSource,\n    {\n        id       : 2,\n        dataType : \"Discrete\",\n        ipAddress: \"127.0.0.1\",\n        port     : 3002,\n        label    : \"Sensor #2\",\n        sampleFrequency: 1,\n    } as IDataSource,\n    {\n        id       : 3,\n        dataType : \"Continuous\",\n        ipAddress: \"127.0.0.1\",\n        port     : 3003,\n        label    : \"Sensor #3\",\n        sampleFrequency: 1,\n    } as IDataSource,\n    {\n        id       : 4,\n        dataType : \"Discrete\",\n        ipAddress: \"127.0.0.1\",\n        port     : 3004,\n        label    : \"Sensor #4\",\n        sampleFrequency: 4,\n    } as IDataSource,\n];\n\nlet charts: IChart[] = [\n    {\n        id: 1,\n        buffer: 70,\n        chartType: \"Line Chart\",\n        label: \"Temperature Scale (ºC)\",\n        dataSources: [\n            dataSources[0],\n            dataSources[1],\n            dataSources[2],\n        ]\n    } as IChart,\n    {\n        id: 2,\n        buffer: 10,\n        chartType: \"Bar Chart\",\n        label: \"Chart #2\",\n        dataSources: [\n            dataSources[0],\n            dataSources[1],\n            dataSources[2],\n        ]\n    } as IChart,\n    {\n        id: 3,\n        buffer: 50,\n        chartType: \"Scatter Plot\",\n        label: \"Radioactivity (Bq)\",\n        dataSources: [\n            dataSources[0],\n            dataSources[1],\n            dataSources[2],\n        ]\n    } as IChart,\n    {\n        id: 4,\n        buffer: 10,\n        chartType: \"Pie Chart\",\n        label: \"Disk Storage Space (GB)\",\n        dataSources: [\n            dataSources[0],\n            dataSources[1],\n            dataSources[2],\n        ]\n    } as IChart,\n];\n\nexport { charts, dataSources };","import React         from \"react\"           ;\nimport ChartCard     from \"./ChartCard\"     ;\nimport ChartPrompt   from \"./ChartAddView\"   ;\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport { IChart } from \"../Types/ChartType\";\n\n\nimport * as mock from \"../mock\";\nimport { fetchAllCharts } from \"../Comunication/Chart\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.s\ninterface IProps {\n\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    charts: IChart[];\n}\n\n// Este classe é responsável por todas as funcionalidades pertinentes\n// aos Charts. Isso inclue Adição, Remoção, Edição e Visualização.\nexport default class Chart extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: any) {\n        super(props);\n        this.state = { charts: []};\n    }\n\n    componentDidMount = () => {\n        fetchAllCharts()\n        .then(charts => {\n            this.setState({\n                charts: charts,\n            });\n        })\n        .catch(error => {\n            NotificationManager.error(\"Could not fetch chats!\");\n        });\n    }\n\n    componentWillUnmount = () => {\n        mock.charts.push(...this.state.charts);\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    // Adiciona um Chart para a lista de charts.\n    addChart = (chart: IChart) => {\n        this.setState((state, props) => ({\n            charts: [...this.state.charts, chart]\n        }));\n    };\n\n    // Edita um Chart.\n    editChart = (chart: IChart) => {\n        this.setState((state, props) => {\n            // Verifica qual Chart foi alterado.\n            const editedCharts = state.charts.map((_chart: IChart) => {\n                    if (_chart.id === chart.id)\n                        _chart = {..._chart, ...chart};\n\n                return _chart;\n            });\n\n            return {\n                charts: editedCharts,\n            } as IState;\n        });\n\n    }\n\n    deleteChart = (chart: IChart) => {\n        this.setState((state, props) => {\n            const nonRemovedCharts = state.charts.filter((_chart: IChart) => (\n                _chart.id !== chart.id\n            ));\n\n            return {\n                charts: nonRemovedCharts,\n            } as IState;\n        });\n    }\n\n    // Exibe a lista de Charts.\n    makeList = () => {\n        return (<div className=\"container\">\n                    <div className=\"row-sm-6\">\n                        <div className=\"col\">\n                            { this.state.charts.map((chart, i) =>\n                                <ChartCard\n                                    key={JSON.stringify(chart)}\n                                    chart={chart}\n                                    editCallback={this.editChart}\n                                    deleteCallback={this.deleteChart}/>)\n                            }\n                        </div>\n                    </div>\n                </div>);\n    };\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    render() {\n        return (<>\n            <ChartPrompt addCallback={this.addChart} />\n            {this.makeList()}\n        </>);\n    }\n\n}","import React from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport {NotificationManager} from \"react-notifications\";\n\nimport { IDataSource } from \"../Types/DataSourceType\";\nimport { deleteDataSource } from \"../Comunication/DataSource\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    dataSource: IDataSource;\n\n    deleteCallback: (dataSource: IDataSource) => any;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    modal: boolean;\n}\n\n// Esta classe trata das funcionalidades pertinentes à exclusão de uma\n// Fonte de Dados.\nexport default class DataSourceDelete extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, modal: false };\n    }\n\n    showModal = () => {\n        this.setState({modal: true});\n    }\n\n    hideModal = () => {\n        this.setState({modal: false});\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    delete = () => {\n        const dataSource = this.props.dataSource;\n        this.hideModal();\n\n        // TEST Testar comunicação com o servidor.\n        deleteDataSource(dataSource.id)\n        .then(res => {\n            if (!res)\n                throw new Error(\"Could not delete Data Source\");\n\n            this.props.deleteCallback(dataSource);\n            NotificationManager.success(\"Data Source deleted!\");\n        })\n        .catch(error => {\n            NotificationManager.error(\"Could not delete Data Source\");\n        });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    render(): React.ReactNode {\n        return (<>\n        <Modal show={this.state.modal} onHide={this.hideModal}>\n            <Modal.Header>\n                { this.state.dataSource.label }\n            </Modal.Header>\n            <Modal.Body>\n                <h4>\n                    Are you sure?\n                </h4>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                        Cancel\n                </Button>\n                <Button\n                    variant=\"danger\"\n                    onClick={this.delete}>\n                        Delete\n                </Button>\n            </Modal.Footer>\n        </Modal>\n        <Button\n            className=\"btn btn-light text-danger mx-2 tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons\">delete_forever</i>\n            <span className=\"tooltiptext\">Delete Data Source</span>\n        </Button>\n        </>);\n    }\n}","import React from \"react\";\n\nimport { IDataSource } from \"../Types/DataSourceType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\nexport class DataSourceController {\n    ipAddress      : React.RefObject<HTMLInputElement>;\n    port           : React.RefObject<HTMLInputElement>;\n    label          : React.RefObject<HTMLInputElement>;\n    dataType       : React.RefObject<HTMLInputElement>;\n    sampleFrequency: React.RefObject<HTMLInputElement>;\n\n    constructor() {\n        this.ipAddress       = React.createRef();\n        this.port            = React.createRef();\n        this.label           = React.createRef();\n        this.dataType        = React.createRef();\n        this.sampleFrequency = React.createRef();\n    }\n\n    // Testa se há referências não atribuídas.\n    checkForNullInputs = () => {\n        return !(\n            this.ipAddress       != null &&\n            this.port            != null &&\n            this.label           != null &&\n            this.dataType        != null &&\n            this.sampleFrequency != null\n        );\n    }\n\n    // Lê os campos e retorna um objeto DataSource.\n    readInput = () => {\n        const ipAddress       = this.ipAddress.current.value;\n        const port            = this.port.current.value;\n        const label           = this.label.current.value;\n        const dataType        = this.dataType.current.value;\n        const sampleFrequency = this.sampleFrequency.current.value;\n\n        const dataSource: IDataSource = {\n            id             : null,\n            ipAddress      : ipAddress,\n            port           : parseInt(port),\n            label          : label,\n            dataType       : dataType,\n            sampleFrequency: parseFloat(sampleFrequency),\n        };\n\n        return dataSource;\n    }\n}","\nexport enum EStatus { On = \"On\", Off = \"Off\"};\n\nexport interface IDataSourceStatus {\n    uptime: Date;\n    sensorStatus: EStatus; // On, Off\n    requestPerHour: number;\n}","import React from \"react\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport {NotificationManager} from \"react-notifications\";\nimport { Button, Form, Modal, FormLabel, FormText, ModalBody, ModalFooter } from \"react-bootstrap\";\n\nimport { IDataSource } from \"../Types/DataSourceType\";\nimport { updateDataSource } from \"../Comunication/DataSource\";\nimport { DataSourceController } from \"./DataSourceController\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    dataSource: IDataSource;\n\n    editCallback: (dataSource: IDataSource) => any;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    modal: boolean,\n}\n\n\n// Esta classe trata das funcionalidades pertinentes à edição de uma\n// Fonte de Dados.\nexport default class DataSourceEdit\n    extends React.Component<IProps, IState> {\n\n    state: IState;\n    controller: DataSourceController = new DataSourceController();\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, modal: false, };\n    }\n\n    showModal = () => {\n        this.setState({modal: true});\n    }\n\n    hideModal = ()  => {\n        this.setState({ modal: false });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    edit = () => {\n        let editDtSrc = this.controller.readInput();\n        editDtSrc.id = this.props.dataSource.id; // O ID se mantém.\n\n        this.hideModal();\n\n        // Faz a requisição para atualizar os dados do Data Source. Se os tudo\n        // ocorrer corretamente uma mensagem de sucesso é exibida, caso contrá-\n        // rio, uma mensagem de error é gerada.\n        updateDataSource(editDtSrc)\n        .then(updatedDataSource => {\n            editDtSrc = updatedDataSource;\n\n            // Adiciona na lista de Data Sources.\n            this.props.editCallback(updatedDataSource);\n\n            NotificationManager.success(\"Data Source updated!\");\n\n        })\n        .catch(err => {\n            NotificationManager.error(\"Unable to update Data Source!\");\n\n        });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    makeBody = ()=> {\n        return (<>\n        <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n\n            <FormLabel>IP Address</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Source IP\"\n                defaultValue={this.state.dataSource.ipAddress}\n                ref={this.controller.ipAddress} />\n            <FormText className=\"text-muted\">\n            Data Source IP Address. Eg. 127.0.0.1\n            </FormText>\n\n            <FormLabel>Port Number</FormLabel>\n            <input\n                type=\"number\"\n                className=\"form-control\"\n                placeholder=\"Port Number\"\n                defaultValue={this.state.dataSource.port.toString()}\n                ref={this.controller.port} />\n            <FormText className=\"text-muted\">\n            Port Number ≥ 3000.\n            </FormText>\n\n            <FormLabel>Label</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Source Label\"\n                defaultValue={this.state.dataSource.label}\n                ref={this.controller.label} />\n            <FormText className=\"text-muted\">\n            Data Source Label. Eg. Sensor #1\n            </FormText>\n\n            <FormLabel>Data Type</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Type\"\n                defaultValue={this.state.dataSource.dataType}\n                ref={this.controller.dataType} />\n            <FormText className=\"text-muted\">\n            Continuous or Discrete.\n            </FormText>\n\n            <FormLabel>Sample Frequency</FormLabel>\n            <input\n                type=\"number\"\n                step=\".1\"\n                className=\"form-control\"\n                placeholder=\"Sample Frequency\"\n                defaultValue={this.state.dataSource.sampleFrequency.toString()}\n                ref={this.controller.sampleFrequency}/>\n            <FormText className=\"text-muted\">\n            Sample Frequency ≤ 4Hz.\n            </FormText>\n\n        </Form.Group>\n        </Form>\n        </>);\n    }\n\n    render(): React.ReactNode {\n        return (<>\n        <Modal show={this.state.modal} onHide={this.hideModal}>\n            <ModalHeader>\n                { this.state.dataSource.label }\n            </ModalHeader>\n            <ModalBody>\n                { this.makeBody() }\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                    Cancel\n                </Button>\n                <Button\n                    variant=\"warning\"\n                    onClick={this.edit}>\n                    Save\n                </Button>\n            </ModalFooter>\n        </Modal>\n        <Button\n            className=\"btn btn-light text-warning  mx-2 tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons\">edit</i>\n            <span className=\"tooltiptext\">Edit Data Source</span>\n        </Button>\n        </>);\n    }\n}","import axios from \"axios\";\n\nimport { IDataSource } from \"../Types/DataSourceType\";\nimport { IChartInputType } from \"../Types/ChartInputType\";\nimport { IDataSourceStatus } from \"../Types/DataSourceStatus\";\n\n\nclass fetch {\n    // Busca o dados de uma Data Source específica.\n    static data(\n        dataSource: IDataSource,\n        lastSampleTime: Date = new Date())\n        : Promise<IChartInputType> {\n\n        const lastRequest = lastSampleTime;\n        const ip = dataSource.ipAddress;\n        const port = dataSource.port\n        const url = `http://${ip}:${port}/data/${lastRequest}`;\n\n        return new Promise((resolve, reject) => {\n            axios.get(url)\n            .then((response) => {\n                resolve({\n                    dataSource: dataSource,\n                    data: response.data,\n                } as IChartInputType);\n            })\n            .catch(err => {\n                reject(err);\n            });\n        });\n    }\n\n    static status(\n        dataSource: IDataSource)\n        : Promise<IDataSourceStatus> {\n\n        const ip = dataSource.ipAddress;\n        const port = dataSource.port\n        const url = `http://${ip}:${port}/status`;\n\n        return new Promise((resolve, reject) => {\n            axios.get(url)\n            .then((response) => {\n                const data = response.data as IDataSourceStatus;\n                data.uptime = new Date(data.uptime);\n                resolve(data);\n            })\n            .catch(err => {\n                reject(err);\n            });\n        });\n    }\n}\n\nexport {\n    fetch,\n};","import React from \"react\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { Button, Modal, ModalFooter, ModalBody } from \"react-bootstrap\";\n\nimport { fetch } from \"../Comunication/Data\";\nimport { IDataSource } from \"../Types/DataSourceType\";\nimport { IDataSourceStatus, EStatus } from \"../Types/DataSourceStatus\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    dataSource: IDataSource;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    modal: boolean;\n    status: IDataSourceStatus;\n}\n\n// Esta classe trata das funcionalidades pertinentes aos testes de uma\n// Fonte de Dados. Teste, neste contexto, significa a comunição com a\n// Fonte de Dados.\nexport default class DataSourceTest extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            ...props,\n            modal: false,\n            status: {\n                sensorStatus  : EStatus.Off,\n                uptime        : null,\n                requestPerHour: null,\n            }};\n    }\n\n    hideModal = () => {\n        this.setState({modal: false});\n    }\n\n    showModal = () => {\n        this.setState({modal: true});\n    }\n\n    componentDidMount = () => {\n        this.fetchDataSourceStatus();\n    }\n\n    fetchDataSourceStatus = () => {\n        // Realiza uma requisição do status da Data Source.\n        fetch.status(this.state.dataSource)\n        .then(status => {\n            this.setState({\n                status: status\n            });\n        })\n        .catch(() => {\n            this.setState({\n                status: {\n                    sensorStatus  : EStatus.Off,\n                    uptime        : null,\n                    requestPerHour: null,\n                }\n            });\n        });\n    }\n\n    render() {\n        return <>\n        <Modal show={this.state.modal} onHide={this.hideModal}>\n            <ModalHeader>\n                { this.state.dataSource.label }\n            </ModalHeader>\n            <ModalBody className=\"text-center\">\n                    <h4>Test Data Source</h4>\n                <div className=\"p-3\"/>\n                <Button\n                    variant=\"success\"\n                    onClick={this.fetchDataSourceStatus}>\n                    Send Request\n                </Button>\n                <div className=\"p-2\"/>\n                <table className=\"table-view w-100\">\n                    <tbody>\n                        <tr>\n                            <td>Status</td>\n                            <td>\n                                {this.state.status.sensorStatus.toString()}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Up Time</td>\n                            <td>\n                                {\n                                    this.state.status.uptime  ?\n                                    this.state\n                                        .status\n                                        .uptime\n                                        .toLocaleDateString() :\n                                    \"--:--:--\"\n                                }\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Request per hour</td>\n                            <td>\n                                {\n                                    this.state.status.requestPerHour ?\n                                    this.state.status.requestPerHour :\n                                    \"---\"\n                                }\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n        <Button\n            className=\"btn btn-light text-primary mx-2 tootiped-component\"\n            onClick={this.showModal}>\n            <i className=\"material-icons\">network_check</i>\n            <span className=\"tooltiptext\">Test Data Source</span>\n        </Button>\n        </>;\n    }\n}","import React, { Component } from \"react\"                 ;\n\nimport DataSourceDelete     from \"./DataSourceDeleteView\";\nimport DataSourceEdit       from \"./DataSourceEditView\"  ;\nimport DataSourceTest       from \"./DataSourceTest\"      ;\n\nimport { IDataSource } from \"../Types/DataSourceType\"    ;\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n\n// A interface IProps.\ninterface IProps {\n    dataSource: IDataSource;\n\n    editCallback: (dataSource: IDataSource) => any;\n    deleteCallback: (dataSource: IDataSource) => any;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n\n}\n\n// Cria um Card para cada Fonte de Dados cadastrada.\nexport default class DataSourceCard extends Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props};\n    }\n\n    public render() {\n        return (\n        <div className=\"card m-4 datasource-card\">\n            <h5 className=\"card-header\">{this.state.dataSource.label}</h5>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Data Source features:</h5>\n                <div className=\"card-text w-100\">\n                    <table className=\"datasource-features\">\n                        <tbody>\n                        <tr>\n                            <td>IP Address</td>\n                            <td>{this.state.dataSource.ipAddress}</td>\n                        </tr>\n                        <tr>\n                            <td>Port</td>\n                            <td>{this.state.dataSource.port}</td>\n                        </tr>\n                        <tr>\n                            <td>Data Type</td>\n                            <td>{this.state.dataSource.dataType}</td>\n                        </tr>\n                        <tr>\n                            <td>Sample Frequency</td>\n                            <td>{this.state.dataSource.sampleFrequency}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div>\n                <DataSourceDelete\n                    dataSource={this.state.dataSource}\n                    deleteCallback={this.props.deleteCallback}\n                />\n\n                <DataSourceEdit\n                    dataSource={this.state.dataSource}\n                    editCallback={this.props.editCallback}\n                />\n\n                <DataSourceTest\n                    dataSource={this.state.dataSource}\n                />\n                </div>\n\n            </div>\n        </div>);\n    }\n}","import React from \"react\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Button, Modal, Form, FormText, FormLabel, FormGroup, ModalFooter,\n        ModalBody, ModalTitle } from \"react-bootstrap\"\n\nimport { IDataSource } from \"../Types/DataSourceType\";\nimport { addDataSource } from \"../Comunication/DataSource\";\nimport { DataSourceController } from \"./DataSourceController\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n    addCallback: (dataSource: IDataSource) => any;\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    show: boolean;\n}\n\n// Esta classe trata das funcionalidades pertinentes à adição de uma\n// Fonte de Dados.\nexport default class DataSourcePrompt\n    extends React.Component<IProps, IState> {\n\n    state: IState;\n    controller: DataSourceController = new DataSourceController();\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props, show: false };\n    }\n\n    showModal: () => void = () => {\n        this.setState({show: true});\n    }\n\n    hideModal: () => void = () => {\n        this.setState({show: false});\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n\n    add: () => void = () => {\n\n        let dataSource = this.controller.readInput();\n\n        this.hideModal();\n\n        // Envia uma requisição para adicionar a DataSource. Se tudo ocorrer bem\n        // a Data Source é adicionada na lista e uma mensagem de sucesso é gera-\n        // da. Caso contrário, uma mensagem de erro é gerada.\n        addDataSource(dataSource)\n        .then(addedDataSource => {\n            dataSource = addedDataSource;\n            this.props.addCallback(dataSource); // Adiciona na lista.\n\n            NotificationManager.success(\"Data Source added!\");\n        })\n        .catch(() => {\n            NotificationManager.error(\"Could not add Data Source!\");\n        });\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    makeAddBody: () => React.ReactNode = () => <div>\n        <Form>\n        <FormGroup controlId=\"formBasicEmail\">\n\n            <FormLabel>IP Address</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Source IP\"\n                ref={this.controller.ipAddress} />\n            <FormText className=\"text-muted\">\n            Data Source IP Address. Eg. 127.0.0.1\n            </FormText>\n\n            <FormLabel>Port Number</FormLabel>\n            <input\n                type=\"number\"\n                className=\"form-control\"\n                placeholder=\"Port Number\"\n                ref={this.controller.port}/>\n            <FormText className=\"text-muted\">\n            Port Number ≥ 3000.\n            </FormText>\n\n            <FormLabel>Label</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Source Label\"\n                ref={this.controller.label} />\n            <FormText className=\"text-muted\">\n            Data Source Label. Eg. Sensor #1\n            </FormText>\n\n            <FormLabel>Data Type</FormLabel>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Data Type\"\n                ref={this.controller.dataType} />\n            <FormText className=\"text-muted\">\n            Continuous or Discrete.\n            </FormText>\n\n            <FormLabel>Sample Frequency</FormLabel>\n            <input\n                type=\"number\"\n                className=\"form-control\"\n                placeholder=\"Sample Frequency\"\n                ref={this.controller.sampleFrequency} />\n            <FormText className=\"text-muted\">\n            Sample Frequency ≤ 4Hz.\n            </FormText>\n\n        </FormGroup>\n        </Form>\n    </div>;\n\n    render = () => {\n        return (\n        <>\n        <div className=\"add-component tootiped-component\" onClick={this.showModal}>\n            <i className=\"material-icons md-48\">add_circle_outline</i>\n            <span className=\"tooltiptext\">Add Data Source</span>\n        </div>\n\n        <Modal show={this.state.show} onHide={this.hideModal}>\n            <ModalHeader /* closeButton */>\n                <ModalTitle>Data Source</ModalTitle>\n            </ModalHeader>\n\n            <ModalBody>\n            { this.makeAddBody() }\n            </ModalBody>\n\n            <ModalFooter>\n                <Button\n                    variant=\"secondary\"\n                    onClick={this.hideModal}>\n                    Cancel\n                </Button>\n\n                <Button\n                    variant=\"primary\"\n                    onClick={this.add}>\n                    Add\n                </Button>\n            </ModalFooter>\n        </Modal>\n        </>\n        );\n    }\n}","import React            from \"react\"                  ;\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport DataSourceCard   from \"./DataSourceCard\"       ;\nimport DataSourcePrompt from \"./DataSourceAddView\"    ;\n\nimport { IDataSource }  from \"../Types/DataSourceType\";\n\nimport * as mock        from \"../mock\"                ;\nimport { fetchAllDataSources } from \"../Comunication/DataSource\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n\n}\n\n// A interface IState.\ninterface IState extends IProps {\n    dataSources: IDataSource[];\n}\n\n// Componente que encapsula tudo a respeito da Fonte de dados.\nexport default class DataSource extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            dataSources: new Array<IDataSource>()\n        };\n    }\n\n    componentDidMount = () => {\n        fetchAllDataSources().then(dataSources => {\n            this.setState( {\n                dataSources: dataSources,\n            });\n        })\n        .catch(error => {\n            NotificationManager.error(\"Could not load Data Sources!\");\n        });\n\n    }\n\n    // Adiciona uma nova Data Source.\n    addDataSource = (dataSource: IDataSource) => {\n        this.setState((state, props) => {\n            // Acrescenta a Data Source e atualiza o estado.\n            return {\n                dataSources: [...state.dataSources, dataSource],\n            } as IState;\n        });\n    }\n\n    // Edita uma Data Source.\n    editDataSource = (dataSource: IDataSource) => {\n        this.setState((state, props) => {\n            // Modica na lista de Data Sources a Data Source modificada.\n            const editedDtSrc = state.dataSources.map(_dataSource => {\n                if (_dataSource.id === dataSource.id) {\n                    _dataSource = {..._dataSource, ...dataSource};\n                }\n\n                return _dataSource;\n            });\n\n            // Atualiza o estado.\n            return {\n                dataSources: editedDtSrc,\n            } as IState;\n        });\n    }\n\n    // Deleta uma Data Source.\n    deleteDataSource = (dataSource: IDataSource) => {\n        this.setState((state, props) => {\n            // Filtra a Data Source especificada.\n            const filtredDtSrc = state.dataSources.filter(_dataSource => (\n                _dataSource.id !== dataSource.id\n            ));\n\n            // Atualiza o estado.\n            return {\n                dataSources: filtredDtSrc,\n            } as IState;\n        });\n    }\n\n\n    render() {\n        return (\n        <div>\n            <DataSourcePrompt\n                addCallback={this.addDataSource}\n            />\n            <div className=\"container\">\n                <div className=\"row-sm-6\">\n                    <div className=\"col\">\n                        { this.state.dataSources.map((dataSource, i) =>\n                            <DataSourceCard\n                                key={JSON.stringify(dataSource)}\n                                dataSource={dataSource}\n                                deleteCallback={this.deleteDataSource}\n                                editCallback={this.editDataSource}\n                            />)\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>);\n    }\n}","import {IUser} from \"../Types/UserType\";\nimport axios from \"axios\";\n\n// Para teste apenas.\n// const baseAddr = \"http://localhost:5000\";\nconst baseAddr = \"\";\n\n// Registra um usuário.\nexport function registerUser(user: FormData) {\n    return (\n        axios.post(baseAddr + \"/api/users\", user)\n            .then(res  => Promise.resolve(res.status))\n            .catch(Promise.reject)\n        );\n}\n\n// Loga um usuário.\nexport function loginUser(user: Partial<IUser>) {\n    return (\n        axios.post(baseAddr + \"/api/login\", JSON.stringify(user), {\n            withCredentials: true,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }\n        })\n        .then(res => {\n            console.log(\"Here\");\n            console.log(res);\n            return Promise.resolve(res.status)\n        })\n        .catch(err => {\n\n            console.log(err);\n        })\n    );\n}\n\n// Retorna os dados do usuário logado.\nexport function getUserData() : Promise<Partial<IUser>> {\n    return (\n        axios.get(baseAddr + \"/api/users\", {\n            withCredentials: true,\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        })\n        .then(res => Promise.resolve(res.data as Partial<IUser>))\n        .then(user => {\n            user.avatar = baseAddr + user.avatar;\n            return Promise.resolve(user);\n        })\n        .catch(Promise.reject)\n    );\n}\n\nexport function updateUserData(user: FormData) : Promise<Partial<IUser>> {\n    return (\n        axios.put(baseAddr + \"/api/users\", user, {\n            withCredentials: true,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(res  => Promise.resolve(res.data as IUser))\n            .catch(Promise.reject)\n        );\n}\n\n// Encerra a sessão de um usuário.\nexport function logOut () : Promise<boolean> {\n    return (\n        axios.get(baseAddr + \"/api/logout\", {\n            withCredentials: true,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(res => Promise.resolve(res.status === 200))\n        .catch(Promise.reject)\n    );\n}","import { registerUser } from \"../Comunication/Login\";\nimport React, {Component, RefObject, createRef } from \"react\";\nimport {NotificationManager} from 'react-notifications';\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\ninterface IProps {\n\n}\n\ninterface IState extends IProps {\n\n}\n\nexport class RegisterPrompt extends Component<IProps, IState> {\n    regName    : RefObject<HTMLInputElement>;\n    regEmail   : RefObject<HTMLInputElement>;\n    regPassword: RefObject<HTMLInputElement>;\n    regAvatar  : RefObject<HTMLInputElement>;\n\n    constructor(props: IProps) {\n        super(props);\n\n        // Dados para registrar um usuário.\n        this.regName     = createRef();\n        this.regEmail    = createRef();\n        this.regPassword = createRef();\n        this.regAvatar   = createRef();\n    }\n\n    // Obtém os dados inseridos.\n    getRegisterData = () => {\n        const formData = new FormData();\n        formData.append(\"name\"    , this.regName.current.value);\n        formData.append(\"email\"   , this.regEmail.current.value);\n        formData.append(\"password\", this.regPassword.current.value);\n        formData.append(\"avatar\"  , this.regAvatar.current.files[0]);\n\n        return formData;\n    }\n\n    // Registra um usuário. Exibe o resultado através de notificações.\n    registerUser = async () => {\n        const userData = this.getRegisterData();\n\n        registerUser(userData)\n        .then(statusCode => {\n            if (statusCode === 200)\n                NotificationManager.success(\"User registred!\");\n            else\n                NotificationManager.warning(\"Invalid data!\");;\n        })\n        .catch(err => {\n            NotificationManager.error(\"Network error!\");\n        });\n    }\n\n    // Mostra a imagem que o usuário selecionou como avatar.\n    showAvatar = () => {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(this.regAvatar.current.files[0]);\n        fileReader.onload = (e) => {\n            const img = document.getElementById(\"avatarPreview\");\n            const result = (e.target as FileReader).result;\n            img.setAttribute(\"src\", result as string);\n        }\n    }\n\n\n    render = () => {\n        return (<>\n        <h3>Register</h3>\n            <div className=\"form-group frame\">\n                <label htmlFor=\"customFile\">\n                    Avatar\n                    <img\n                        className=\"preview\"\n                        id=\"avatarPreview\">\n                    </img>\n                </label>\n                <input\n                    type=\"file\"\n                    className=\"custom-file-input\"\n                    id=\"customFile\"\n                    ref={this.regAvatar}\n                    onChange={this.showAvatar}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Name</label>\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    ref={this.regName}/>\n            </div>\n            <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    ref={this.regEmail}/>\n            </div>\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    ref={this.regPassword}/>\n            </div>\n\n            <button\n                className=\"btn btn-primary\"\n                onClick={this.registerUser}>Submit\n            </button>\n        </>)\n    }\n}","import React, {Component, RefObject, createRef} from \"react\";\nimport { loginUser } from \"../Comunication/Login\";\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport { withRouter, RouteComponentProps } from \"react-router\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState extends IProps {}\n\nexport class LoginPrompt_ extends Component<IProps, IState> {\n    loginEmail   : RefObject<HTMLInputElement>;\n    loginPassword: RefObject<HTMLInputElement>;\n\n    constructor(props: IProps) {\n        super(props);\n\n        // Dados para logar um usuário.\n        this.loginEmail    = createRef();\n        this.loginPassword = createRef();\n    }\n\n    getLoginData = () => {\n        const email = this.loginEmail.current.value;\n        const password = this.loginPassword.current.value;\n\n        return {email: email, password: password};\n    }\n\n    login = () => {\n        const credentials = this.getLoginData();\n\n        loginUser(credentials)\n        .then(status => {\n            if (status) {\n                NotificationManager.success(\"User logged!\");\n                this.props.history.push(\"/home\");\n            } else {\n                NotificationManager.warning(\"Login failed!\");\n                this.props.history.push(\"/login\");\n            }\n        })\n        .catch(err => {\n            NotificationManager.error(\"Network error!\");\n        })\n    }\n\n    render = () => {\n        return (<>\n        <h3>Login</h3>\n            <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    ref={this.loginEmail}/>\n            </div>\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    ref={this.loginPassword}/>\n            </div>\n            <button\n                className=\"btn btn-primary\"\n                onClick={this.login}>Login</button>\n        </>);\n    }\n}\n\nconst LoginPrompt = withRouter(LoginPrompt_);\nexport {LoginPrompt};","import React, {Component, RefObject, createRef} from \"react\";\nimport Axios, {AxiosInstance} from \"axios\";\nimport {RegisterPrompt} from \"./RegisterPrompt\";\nimport \"../Styles/login.css\";\nimport { LoginPrompt } from \"./LoginPrompt\";\nimport {NotificationContainer} from \"react-notifications\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n\n}\n\nexport class LoginScreen extends Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n    }\n\n    render = () => (\n\n    <div className=\"screen\">\n        <NotificationContainer leaveTimeout={200} enterTimeout={100}/>\n        <video autoPlay muted loop id=\"myVideo\" className=\"screen\">\n        <source src=\"asset/background.mp4\" type=\"video/mp4\"/>\n        Your browser does not support HTML5 video.\n        </video>\n\n        <div className=\"register\">\n            <RegisterPrompt />\n        </div>\n        <div className=\"login\">\n            <LoginPrompt/>\n        </div>\n    </div>\n    );\n}","import React from 'react';\nimport Chart from \"./Chart/ChartView\";\nimport DataSource from \"./DataSource/DataSourceView\";\n\nimport {NotificationContainer, NotificationManager} from \"react-notifications\";\n\nimport { BrowserRouter as Router, Route, Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { getUserData, logOut } from './Comunication/Login';\n\n/* import \"./Styles/style.css\";\nimport \"./Styles/chart-card.css\";\nimport \"./Styles/chart-comp-style.css\";\nimport \"./Styles/datasource-card.css\";\nimport \"./Styles/statistic-style.css\"; */\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps extends RouteComponentProps {\n\n};\n\n// A interface IState.\ninterface IState extends IProps {\n\n};\n\n\nclass Menus_ extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props };\n    }\n\n    componentDidMount = () => {\n        this.fetchUserData();\n    }\n\n    fetchUserData = () => {\n        // Busca os dados do usuário para exibir no menu inicial.\n        getUserData()\n        .then(data => {\n            // Exibe o avatar do usuário.\n            const img = document.getElementById(\"avatar\");\n            img.setAttribute(\"src\", data.avatar);\n            img.setAttribute(\"title\", data.name);\n        })\n        .catch(error => {\n            this.props.history.push(\"/login\");\n        });\n    }\n\n    logout = () => {\n        logOut()\n        .then(result => {\n            if (!result)\n                throw new Error(\"Could not logout!\");\n\n            NotificationManager.success(\"Bye!\");\n            this.props.history.push(\"/login\");\n        })\n        .catch(error => NotificationManager.error(error));\n    }\n\n    render = () => (\n        <div>\n            <NotificationContainer leaveTimeout={200} enterTimeout={100}/>\n            <div className=\"top-bar\">\n                <Link to=\"/home\">\n                    <label>\n                        Sensorize\n                </label>\n                </Link>\n                <div className=\"hr\" />\n            </div>\n            <div className=\"left-menu\">\n                <div className=\"avatar\">\n                    <img id=\"avatar\"/>\n                </div>\n                <div className=\"gap\"></div>\n                <Link to=\"/home\">\n                    <div className=\"menu-item\">\n                        <i className=\"material-icons mx-1\">home</i>\n                        <label>Home</label>\n                    </div>\n                </Link>\n                <Link to=\"/chart\">\n                    <div className=\"menu-item\">\n                        <i className=\"material-icons mx-1\">insert_chart</i>\n                        <label>Charts</label>\n                    </div>\n                </Link>\n                <Link to=\"/datasource\">\n                    <div className=\"menu-item\">\n                        <i className=\"material-icons mx-1\">\n                            settings_applications\n                    </i>\n                        <label>Data Source</label>\n                    </div>\n                </Link>\n                <Link to=\"/logout\">\n                    <div\n                        className=\"menu-item\"\n                        onClick={this.logout}>\n                        <i className=\"material-icons mx-1\">exit_to_app</i>\n                        <label>Logout</label>\n                    </div>\n                </Link>\n            </div>\n            {/*  <Router>\n                <div className=\"viewport\">\n                    <Route path=\"/datasource\" component={DataSource} />\n                    <Route path=\"/chart\" component={Chart} />\n                </div>\n            </Router> */}\n\n        </div>\n    );\n}\n\n\nconst Menus = withRouter(Menus_);\nexport {Menus};","import React, {Component} from \"react\";\n\ninterface IProps {\n\n}\n\ninterface IState extends IProps {\n\n}\n\nexport class Intro extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n        <>\n        <div className=\"header top-bar\" id=\"top\">\n            <nav className=\"navigator\">\n                <ul className=\"item\">\n                    <a href=\"#sensorize\">Sensorize</a>\n                </ul>\n\n                <ul className=\"item\">\n                    <a href=\"#actors\">Actors</a>\n                </ul>\n\n                <ul className=\"item\">\n                    <a href=\"#howitworks\">How it works</a>\n                </ul>\n\n                <ul className=\"item login\">\n                    <a href=\"/login\">Login</a>\n                </ul>\n\n            </nav>\n            <div className=\"hr\" />\n        </div>\n\n        <div className=\"content container pt-5 text-black\">\n            <div className=\"topic\" id=\"sensorize\">\n                <h3>Sensorize</h3>\n\n                <p>\n                Sagittis nisl rhoncus mattis rhoncus urna neque viverra justo\n                nec. Eleifend donec pretium vulputate sapien nec sagittis\n                aliquam malesuada bibendum. Porttitor lacus luctus accumsan\n                tortor. Aliquet nec ullamcorper sit amet risus nullam eget\n                felis eget. Amet purus gravida quis blandit turpis cursus.\n                Sed viverra ipsum nunc aliquet bibendum enim facilisis gravida.\n                Sed elementum tempus egestas sed sed. Ac tincidunt vitae semper\n                quis lectus nulla. Dictum sit amet justo donec enim diam\n                vulputate ut. Hendrerit dolor magna eget est. Ac turpis egestas\n                maecenas pharetra convallis posuere morbi. Vitae auctor eu augue\n                ut lectus arcu. Dui vivamus arcu felis bibendum ut tristique et\n                egestas. Consectetur adipiscing elit duis tristique sollicitudin\n                nibh sit amet commodo. Semper viverra nam libero justo. Libero\n                nunc consequat interdum varius sit amet. Nec nam aliquam sem et\n                tortor. Urna neque viverra justo nec ultrices dui sapien.\n                </p>\n            </div>\n            <div className=\"topic\" id=\"actors\">\n                <h3>Actors</h3>\n                <p>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n                eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n                enim ad minim veniam, quis nostrud exercitation ullamco laboris\n                nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n                in reprehenderit in voluptate velit esse cillum dolore eu fugiat\n                nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n                sunt in culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n            </div>\n            <div className=\"topic\" id=\"howitworks\">\n                <h3>How it works</h3>\n\n                <p>\n                Risus viverra adipiscing at in tellus integer feugiat. Aliquam\n                eleifend mi in nulla posuere sollicitudin aliquam. Placerat duis\n                ultricies lacus sed turpis tincidunt id aliquet risus.\n                Pellentesque habitant morbi tristique senectus et netus. Id eu\n                nisl nunc mi ipsum faucibus vitae. Platea dictumst quisque\n                sagittis purus sit amet volutpat consequat. Donec massa sapien\n                faucibus et molestie ac feugiat sed lectus. Lectus nulla at\n                volutpat diam ut venenatis tellus. At elementum eu facilisis sed\n                odio morbi quis. Quisque non tellus orci ac auctor augue mauris.\n                Nibh tortor id aliquet lectus proin nibh. Aliquam id diam\n                maecenas ultricies mi eget mauris pharetra et. At risus viverra\n                adipiscing at. Convallis tellus id interdum velit laoreet id\n                donec. Lobortis feugiat vivamus at augue eget arcu dictum. Erat\n                nam at lectus urna duis convallis convallis.\n                </p>\n            </div>\n\n        </div>\n        <div className=\"footer\">\n\n        </div>\n        </>);\n    }\n}","\nclass Color {\n    constructor(\n        public red  : number,\n        public green: number,\n        public blue : number,\n        public alpha: number) {\n\n    }\n\n    light = () => new Color(this.red, this.green, this.blue, .3);\n\n    dark = () =>  new Color(this.red, this.green, this.blue, 1);\n\n    toString = () => (\n        `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`);\n};\n\nconst Colors: Color[] = [\n    new Color(255,   0,   0, .5), // Red\n    new Color(  0, 255,   0, .5), // Green\n    new Color(  0,   0, 255, .5), // Blue\n    new Color(128,   0, 128, .5), // Purple\n    new Color(255, 255,   0, .5), // Yellow\n    new Color(255, 128,   0, .5), // Orange\n    new Color(  0, 255, 255, .5), // Turquoise\n    new Color(  0,   0,   0, .5), // Black\n];\n\nexport {\n    Color,\n    Colors,\n};","import React from \"react\";\n\nimport { Colors } from \"./ColorList\";\n\nimport { IChart } from \"../Types/ChartType\";\n\nimport { IChartInputType } from \"../Types/ChartInputType\";\n\nimport { Chart, ChartData, ChartOptions } from \"chart.js\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\ninterface IProps {\n    chart      : IChart;\n    width      : number | string;\n    height     : number | string;\n    subscripton: (callback: (data: IChartInputType) => any) => any;\n}\n\ninterface IState extends IProps {\n\n}\n\nexport default class Graph\n    extends React.Component<IProps, IState> {\n\n    canvas      : React.RefObject<HTMLCanvasElement>;\n    viewChart   : Chart         ;\n    data        : ChartData     ;\n    options     : ChartOptions  ;\n    timeID      : NodeJS.Timeout;\n    needToUpdate: boolean       ;\n    timerID     : NodeJS.Timeout;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.canvas       = React.createRef();\n        this.needToUpdate = false;\n\n        Chart.defaults.global.defaultFontFamily = \"'M PLUS 1p', sans-serif\";\n        Chart.defaults.global.defaultFontColor  = \"black\";\n    }\n\n    /**\n     * Esta função realiza o setup de um gráfico, isto é, configura a estrutura\n     * do dataset, cor e bordas. Há uma diferença entre a abordagem do Pie Chart\n     * e os demais gráficos. De maneira simples, o Pie Chart não guarda histó-\n     * rico dos valores passados.\n     */\n    setupData = () => {\n        if (this.props.chart == null) return;\n\n        let nOfDtSrc = 0;\n\n        if (this.props.chart.chartType === \"Pie Chart\")\n            return {\n                labels: new Array<string>(),\n                datasets:\n                    [{\n                        label: \"dataSource.label\",\n                        backgroundColor: Colors.map(c => c.light().toString()),\n                        borderColor    : Colors.map(c => c.dark().toString()),\n                        borderWidth    : 1,\n                        data           : new Array<number>(),\n                    }]\n            };\n        else return {\n            labels: [],\n            datasets:\n                this.props.chart.dataSources.map(\n                    dataSource => ({\n                        label: dataSource.label,\n                        backgroundColor: Colors[nOfDtSrc].light().toString(),\n                        borderColor    : Colors[nOfDtSrc++].light().toString(),\n                        borderWidth    : 3,\n                        data           : [],\n                        fill: false,\n                        lineTension: 0.0,\n                    })\n                ),\n        } as ChartData;\n    }\n\n    /**\n     * As opções de uma gráfico. As animações foram removidas para melhorar o\n     * desempenho do sistema.\n     */\n    setupOptions = () => {\n        const showAxis = this.mappedType() !== \"pie\";\n        const categoryLabel = this.mappedCategory();\n\n        return {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    },\n                    gridLines: {\n                        display: showAxis,\n                    },\n                    display: showAxis,\n                }],\n                xAxes: [{\n                    display: showAxis,\n                    type: categoryLabel,\n                    time: {\n                        unit: \"millisecond\",\n                    },\n                    ticks: {\n                        callback: function(value, index, values) {\n                            const nValues = values.length;\n                            const tenPerc = Math.floor(nValues / 10);\n\n                            if (index % tenPerc === 0 || nValues < 10)\n                                return value;\n\n                            return null;\n                        }\n                    }\n                }],\n            },\n            hover: {\n                animationDuration: 600,\n            },\n            legend: {\n                display: true,\n                position: 'bottom',\n            },\n            layout: {\n                padding: 50,\n            },\n            animation: {\n                duration: 600,\n            },\n            title: {\n                text: (this.props.chart.label),\n                fontSize: 16,\n\n                display: true,\n            },\n\n\n        } as ChartOptions;\n    }\n\n    /**\n     * Mapeia o tipo de gráfico no tipo reconhecido pelo Chart JS.\n     */\n    mappedType() {\n        const chartType = this.props.chart.chartType;\n\n        switch (chartType) {\n        case \"Bar Chart\":\n            return \"bar\"    ;\n\n        case \"Line Chart\":\n            return \"line\"   ;\n\n        case \"Pie Chart\":\n            return \"pie\"    ;\n\n        case \"Scatter Plot\":\n            return \"scatter\";\n\n        default:\n            throw \"Chart Type not supported.\";\n        }\n    }\n\n    /**\n     * Mapeia a tipo de eixo baseado no tipo do gráfico.\n     */\n    mappedCategory() {\n        const chartType = this.props.chart.chartType;\n\n        switch (chartType) {\n        case \"Bar Chart\"   :\n            return \"category\";\n\n        case \"Line Chart\"  :\n            return \"time\"    ;\n\n        case \"Pie Chart\"   :\n            return \"line\"    ;\n\n        case \"Scatter Plot\":\n            return \"time\"    ;\n\n        default:\n            throw \"Chart Type not supported.\";\n        }\n    }\n\n    componentDidMount = () => {\n        const ctx = this.canvas.current.getContext(\"2d\");\n\n        this.data = this.setupData();\n\n        this.options = this.setupOptions();\n\n        this.viewChart = new Chart(ctx, {\n            type   : this.mappedType(),\n            data   : this.data,\n            options: this.options,\n        });\n\n        // Inscreve este componente para receber os dados da fonte de dados.\n        this.props.subscripton(this.updateGraphData);\n\n        /**\n         * O Gráfico é atualizado apenas a partir de uma tempo determinado para\n         * não sobrecarregar o browser.\n         */\n        this.timeID = setInterval(this.updateGraph, 3000);\n    }\n\n    componentWillUnmount = () => {\n        if (this.timeID)\n            clearInterval(this.timeID);\n    }\n\n/**\n * Pie:\n *  [A, B, C] -> onde cada uma é o valor de um data source.\n *\n * Scatter:\n *  [{x: x_0, y: y_0}, {x: x_1, y: y_1}] -> o array inteiro pertencente a\n *      uma única data source.\n *\n * Line Chart:\n *  [{x: x_0, y: y_0}, {x: x_1, y: y_1}] -> o array inteiro pertence a uma\n *      única data source.\n *\n * Bar Chart:\n * [{x: A, y: y_0}, {x: B, y: y_1}] -> a array pertence a uma data source e os\n *      labels são fixos.\n *\n * Commom Patern:\n * {\n *  dataSource: ...,\n *  data: [\n *          {x: ..., y: ...},\n *          {x: ..., y: ...},\n *                ...\n *          {x: ..., y: ...},\n *          {x: ..., y: ...},\n *      ]\n * }\n *\n */\n\n    /**\n     * Adapta os dados para a plotagem de gráficos no formate de Pie.\n     */\n    pieDataParse(data: IChartInputType) {\n        const viewChartData = this.viewChart.data;\n\n         // Labels para os gráficos do tipo Pie. Eixo X.\n        if (viewChartData.labels.findIndex(\n            lbl=>lbl===data.dataSource.label) < 0) {\n            const dataSourceLabel: string = data.dataSource.label;\n            viewChartData.labels.push(dataSourceLabel);\n        }\n\n        // Valores para os gráficos do tipo Pie. Eixo Y.\n        this.viewChart.data.datasets.forEach((dataset, i) => {\n            // Procura o id da data source baseado na do label.\n            const idx = viewChartData.labels.findIndex(\n                lbl => lbl === data.dataSource.label);\n\n            // Apenas o último dado é usado, pois deve ser o mais atual.\n            const length = data.data.length;\n            dataset.data[idx] = data.data[length - 1].y;\n        });\n    }\n\n    /**\n     * Adapta os dados para a plotagem de gráficos no formato do Scatter.\n     * O processamento é o mesmo aplicado ao line Chart.\n     */\n    scatterDataParse(data: IChartInputType) {\n        this.lineDataParse(data);\n    }\n\n    /**\n     * Adapta os dados para a plotagem de gráficos no formato do line Chart.\n     */\n    lineDataParse(data: IChartInputType) {\n        const bufferSize = this.props.chart.buffer;\n        const viewChartData = this.viewChart.data;\n\n        const P = data.data.map(point => {\n            return {\n                x: point.x,\n                y: point.y,\n            } as Chart.ChartPoint;\n        });\n\n        /**\n         * Quando o algum dataset exceder o tamanho do buffer, a elemento que\n         * excedeu é registrado para que seja utilizado como filtro para os de-\n         * mais datasets. Isso se deve ao fato que uma Data Source pode trans-\n         * mitir mais dados que outra e, portanto, a janela de plotagem seria\n         * diferente para cada data Source. Com esse algoritmo,todos os datasets\n         * possuem o mesmo comprimento de janela.\n         */\n        let olderTime: Date = null;\n        viewChartData.datasets\n            .map(dataset => dataset.data as Chart.ChartPoint[])\n            .filter(data => data.length > bufferSize)\n            .map(data => data[data.length - bufferSize].x as Date)\n            .forEach(dt => {\n                if (olderTime == null || olderTime.getTime() > dt.getTime())\n                    olderTime = dt;\n            });\n\n        /**\n         * Exibe os valores para o dataset específico.\n         * Remove dados mais antigos que orderTime (Leia acima para compreender\n         * o propósito dele).\n         */\n        viewChartData.datasets\n            .filter(dataset => dataset.label === data.dataSource.label)\n            .forEach(dataset => {\n                let oldData_ = dataset.data as Chart.ChartPoint[];\n                if (olderTime) {\n                    oldData_ = oldData_\n                        .filter(data => (\n                            (data.x as Date).getTime() > olderTime.getTime()));\n                }\n\n                dataset.data = [...oldData_, ...P];\n            });\n    }\n\n    /**\n     * Adapta os dados para a plotagem de gráficos no formato do bar Chart.\n     * O gráfico em barras é baseado em categorias.\n     */\n    // TODO Testar e Refatorar este código.\n    barDataParse(data: IChartInputType) {\n        // Adiciona os labels.\n        const viewChartData = this.viewChart.data;\n        const labels = new Set<string>([\n            ...viewChartData.labels as string[],\n            ...data.data.map(point => point.x.toString())\n        ]);\n        viewChartData.labels = Array.from(labels);\n\n        // Converte os dados que chegaram para o farmato esperado.\n        const P = data.data.map(point => {\n            return {\n                x: point.x,\n                y: point.y,\n            } as Chart.ChartPoint;\n        });\n\n        // Adiciona os novos dados de acordo com a posição do label.\n        viewChartData.datasets\n        .filter(dataset => dataset.label === data.dataSource.label)\n        .forEach(dataset => {\n            // Adiciona o dado novo na posição do específica do label.\n            P.forEach(\n                dataSample => {\n                    // Procura o índex do label.\n                    const idx = viewChartData.labels.findIndex(\n                        label => label === dataSample.x\n                    );\n\n                    // Atualiza o valor dos dados.\n                    dataset.data[idx] = dataSample.y as number;\n                }\n            )\n        });\n    }\n\n    // Atualiza o gráfico quando algum dado chegar.\n    updateGraphData = (data: IChartInputType) => {\n\n        switch (this.mappedType()) {\n        case \"pie\":\n            this.pieDataParse(data);\n            break;\n        case \"line\":\n            this.lineDataParse(data);\n            break;\n        case \"bar\":\n            this.barDataParse(data);\n            break;\n        case \"scatter\":\n            this.scatterDataParse(data);\n            break;\n        default:\n            throw \"Chart Type not supported.\";\n        }\n\n        this.needToUpdate = true;\n\n    }\n\n    // Atualiza o gráfico\n    updateGraph = () => {\n        if (!this.needToUpdate)\n            return;\n\n        this.viewChart.update();\n        this.needToUpdate = false;\n    }\n\n    render = () => {\n        return (\n        <div className=\"container\">\n            <h1 className=\"text-black\">View</h1>\n            <div style={{\n                        \"width\" : this.props.width,\n                        \"height\": this.props.height,\n                    }}>\n                <canvas\n                    ref={this.canvas}\n                    style={{\n                        \"width\" : this.props.width,\n                        \"height\": this.props.height,\n                    }} />\n            </div>\n        </div>\n        );\n    }\n}","import React from \"react\";\n\nimport { Chart, ChartPoint } from \"chart.js\";\n\nimport * as timeseries from \"timeseries-analysis\";\n\nimport { IChartInputType, IData } from \"../Types/ChartInputType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\ninterface IProps {\n    width : number|string  ;\n    height: number|string  ;\n    data  : IChartInputType;\n}\n\ninterface IState extends IProps {\n    max  : number;\n    min  : number;\n    stdev: number;\n    mean : number;\n}\n\nexport class RegressionChart extends React.Component<IProps, IState> {\n    canvas   : React.RefObject<HTMLCanvasElement>;\n    chartView: Chart         ;\n    state    : IState        ;\n    timerID  : NodeJS.Timeout;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.canvas = React.createRef();\n\n        this.state = {\n            ...props,\n            max  : undefined,\n            min  : undefined,\n            stdev: undefined,\n            mean : undefined,\n        };\n    }\n\n    componentDidMount = () => {\n        const context = this.canvas.current.getContext(\"2d\");\n        this.chartView = new Chart(context, {\n            data: {\n                datasets: [{\n                    label: \"Samples\",\n                    data : [],\n                    fill : false,\n                    borderColor    : \"black\",\n                    backgroundColor: \"white\",\n                    showLine       : false,\n                },{\n                    label: \"Forecast\",\n                    data : [],\n                    fill : false,\n                    borderColor    : \"black\",\n                    backgroundColor: \"red\",\n                    showLine       : true,\n                },]\n            },\n            type: \"line\",\n            options: {\n                legend: {\n                    position: \"bottom\"\n                },\n                scales: {\n                    xAxes: [{\n                        display: true,\n                        type: \"time\",\n                        time: {\n                            unit: \"millisecond\",\n                        },\n                        ticks: {\n                            callback: function(value, index, values) {\n                                const nValues = values.length;\n                                const tenPerc = Math.floor(nValues / 10);\n\n                                if (index % tenPerc === 0 || nValues < 10)\n                                    return value;\n\n                                return null;\n                            }\n                        }\n                    }],\n                },\n                layout: {\n                    padding: {\n                        bottom: 10\n                    },\n                },\n                title: {\n                    display: true,\n                    text: (this.props.data.dataSource.label),\n                },\n                animation: {\n                    duration: 0,\n                }\n            }\n        });\n\n        this.timerID = setInterval(()=>this.updateChartData(), 5000);\n    }\n\n    componentWillUnmount = () => {\n        if (this.timerID)\n            clearInterval(this.timerID);\n    }\n\n    parseToForecast = (data: IData[]) => {\n        return data.map(dt => [dt.x, dt.y]);\n    }\n\n    parseFromForecast = (data: [Date, number][]) => {\n        return data.map(dt => ({x: dt[0], y: dt[1]} as IData));\n    }\n\n    // Calcula a variação média de tempo.\n    getDeltaTime(data: Date[]) {\n        const delta: number[] = [];\n\n        if (data.length <= 1)\n            throw Error(\"Too small\");\n\n        for (let i = 1; i < data.length; ++i) {\n            const diff = data[i].getTime() - data[i - 1].getTime();\n            delta.push(diff);\n        }\n\n        const accumalator = delta.reduce((prev, curr) => prev + curr);\n        return accumalator / delta.length;\n    };\n\n    // Faz a convolução dos dados pelos coeficientes.\n    convolve(data: number[], coefficients: number[]) {\n        const len = Math.min(data.length, coefficients.length);\n        const dataLen = data.length;\n\n        let output = 0;\n        for (let i = 0; i < len; ++i) {\n            output -= data[dataLen - i - 1] * coefficients[i];\n        }\n\n        return output;\n    }\n\n    forecast(inputData: IData[], degree: number, pointToForecast: number) {\n        let data: [Date, number][] =\n            inputData.map(v => [v.x as Date, v.y]);\n\n        const dT = this.getDeltaTime(data.map(v=>v[0])); // Calcula a variação\n                                                         //  média de tempo.\n\n        for (let i = 0; i < pointToForecast; ++i) {\n            const currentData = data; // Utiliza as amostras mais atuais.\n\n            const t = new timeseries.main(currentData);\n\n            const coeff = t.ARMaxEntropy({degree: degree});\n\n            const output = this.convolve(currentData.map(data => data[1]), coeff);\n\n            const lastDate = currentData[currentData.length - 1][0].getTime();\n\n            const newPoint: [Date, number] = [new Date(lastDate + dT), output];\n\n            data.push(newPoint);\n        }\n\n        return data;\n    }\n\n    /**\n     * Realiza os calculos estatisticos. Veja:\n     * - https://www.npmjs.com/package/timeseries-analysis\n     * - http://paulbourke.net/miscellaneous/ar/\n     */\n    getStimatedValues = (data: IData[]) => {\n        return new Promise<[Date, number][]>((resolve, reject) => {\n            const parsedData = this.parseToForecast(data);\n            const t = new timeseries.main(parsedData);\n\n            // Calcula algumas métricas.\n            this.setState({\n                max  : t.max(),\n                min  : t.min(),\n                mean : t.mean(),\n                stdev: t.stdev(),\n            })\n\n            // Reduz os ruídos dos dados.\n            // t.smoother({period:10}).save('smoothed');\n            // const bestSettings = t.regression_forecast_optimize();\n\n            resolve(this.forecast(data, 10, 15));\n\n            // Processa os dados e retorna o resultado.s\n            /* resolve(t.sliding_regression_forecast({\n                method: \"ARLeastSquare\",\n                sample: data.length,\n                degree: 20,\n            }).output()); */\n        });\n    }\n\n    updateChartData = () => {\n        const sampleToAnalyse = 100; // Quantidades de dados para ser analisado.\n        let dataAnalysed = this.props.data.data;\n\n        const idx = dataAnalysed.findIndex((curr, i) => {\n            const currDate = curr.x as Date;\n            const prevDate = i-1 >= 0 ? dataAnalysed[i-1].x as Date : currDate;\n\n            return currDate.getTime() < prevDate.getTime();\n        });\n\n        if (idx >= 0) dataAnalysed = dataAnalysed.slice(idx);\n\n        /**\n         * Plota os dados de uma data Source. Estes não incluem processamento\n         * algum.\n         */\n        this.chartView.data.datasets[0].data =\n            dataAnalysed\n                .map(dt => dt as ChartPoint)\n                .slice(-sampleToAnalyse);\n\n        /**\n         * Assim que o componente tiver dados sufiente, os calculos estatísticos\n         * são realizados.\n         */\n        if (dataAnalysed.length > 5) {\n            // console.log(this.forecast(dataAnalysed, 3, 10));\n            this.getStimatedValues(dataAnalysed.slice(-sampleToAnalyse))\n            .then(data => {\n                const parsedData = this.parseFromForecast(data);\n                this.chartView.data.datasets[1].data = parsedData;\n\n                this.chartView.update();\n            });\n        }\n\n    }\n\n    render = () => {\n        return (\n        <div className=\"container mb-4 ml-2 mr-2\">\n            <div className=\"row justify-content-start\">\n            <div style={{width: \"100%\", height: this.props.height}}>\n                <canvas\n                    ref={this.canvas}\n                    style={{\n                        \"width\" : this.props.width,\n                        \"height\": this.props.height,\n                    }} />\n                </div>\n            </div>\n            <div className=\"row\">\n                <table className=\"statistic-table\">\n                    <thead>\n                        <th colSpan={2}>Metrics</th>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Maximum</td>\n                            <td>{this.state.max}</td>\n                        </tr>\n                        <tr>\n                            <td>Minimum</td>\n                            <td>{this.state.min}</td>\n                        </tr>\n                        <tr>\n                            <td>Mean</td>\n                            <td>{this.state.mean}</td>\n                        </tr>\n                        <tr>\n                            <td>Standard Deviation</td>\n                            <td>{this.state.stdev}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>);\n    }\n}","import React from \"react\";\n\nimport { RegressionChart } from \"./RegressionChart\";\n\nimport { IChartInputType } from \"../Types/ChartInputType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n/**\n * subscription é o método para obter dados do outro componente de tal forma\n * que projeto não necessite realizar requisições desnecessárias as Data Source.\n */\ninterface IProps {\n    subscripton: (callback: (data: IChartInputType) => any) => any;\n}\n\n/**\n * dataSourcesData são todos as Data Source participantes deste Chart.\n */\ninterface IState extends IProps {\n    dataSourcesData: IChartInputType[];\n}\n\nexport class Statistic extends React.Component<IProps, IState> {\n    state: IState;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            ...props,\n            dataSourcesData: new Array<IChartInputType>()\n        };\n    }\n\n    componentDidMount = () => {\n        this.props.subscripton(this.storeData);\n    }\n\n    /**\n     * Esta função é cadastrada em subscription. Ela rebece os dados e os agrupa\n     * em um buffer. Cada buffer armazena dados de uma Data Source específica.\n    */\n    storeData = (data: IChartInputType) => {\n        /**\n         * Caso a fonte de dados ainda não esteja cadastrada/adicionada,\n         * adicione-a.\n         */\n        if (this.state.dataSourcesData.findIndex(\n            dt => dt.dataSource.id === data.dataSource.id) < 0) {\n            this.setState((state, props) => ({\n                dataSourcesData: [...state.dataSourcesData, data]\n            }));\n        }\n\n        /**\n         * Acumule o dado recebido no buffer da fonte de dados correspondente.\n         * Esses dados não podem ser descatados por devem ser utilizados para\n         * realizar calculos estatísticos.\n         */\n        this.state.dataSourcesData.forEach((dt => {\n            if (dt.dataSource.id === data.dataSource.id) {\n                dt.data.push(...data.data);\n            }\n        }));\n    }\n\n    addRegression = () => this.state.dataSourcesData.map((dataSource, i) => (\n        <div className=\"col-6\">\n            <RegressionChart\n                key={i}\n                data={this.state.dataSourcesData[i]}\n                width={\"100%\"}\n                height={\"450px\"}\n            />\n        </div>\n    ));\n\n    render = () => {\n        if ((this.state.dataSourcesData.length > 0) === false) {\n            return (\n            <div className=\"spinner-border text-black\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>);\n        } else {\n            return (\n            <div className=\"container mt-5\">\n                <h3 className=\"text-black\">Statistics</h3>\n                <div className=\"row\">\n                    {this.addRegression()}\n                </div>\n            </div>)\n        };\n    }\n}","import React from \"react\";\n\nimport { fetchChart } from \"../Comunication/Chart\";\nimport { IChart }     from \"../Types/ChartType\";\n\nimport { RouteComponentProps} from \"react-router-dom\";\n\nimport Graph from \"../Graph/Chart\";\nimport { IChartInputType } from \"../Types/ChartInputType\";\nimport { Statistic } from \"../Graph/Statistic\";\n\nimport {NotificationManager} from \"react-notifications\";\n\nimport { fetch } from \"../Comunication/Data\";\nimport { IDataSource } from \"../Types/DataSourceType\";\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n\ninterface IProps extends RouteComponentProps<{id: string}>{\n\n}\n\ninterface IState extends IProps {\n    chart?: IChart;\n}\n\n// TODO Criar o Bar Chart.\n// TODO Criar a politica de notificação de erro.\n\nexport default class DisplaySensor extends React.Component<IProps, IState> {\n    state: IState;\n    timerID: NodeJS.Timeout;\n    /**\n     * O array subscribers é usado para notificar os componentes de estão conti-\n     * dos nesse para obter os dados oriundos da fonte de dados.\n     * Esta abordagem foi utilizada porque elimina a necessidade de realizar\n     * mais requisições à fonte de dados.\n     */\n    subscribers: Array<(data: IChartInputType) => any>;\n\n    /**\n     * \"lastDataFetched\" é responsável por guardar o momenta da última amostra\n     * recebido da data Source.\n     */\n    lastDataFetched: Map<number, Date> = new Map();\n\n    dataSourceRequestTimer: NodeJS.Timeout[] = new Array();\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {...props};\n        this.subscribers = new Array<(data: any) => any>();\n    }\n\n    /**\n     * Inicia a realizar o fetch dos dados nas data sources. Cada data source\n     * possui sua frequência de amostragem específica e, portanto, deve possuir\n     * um timer de acordo com essa frequência.\n     */\n    startSampling = () => {\n        this.state.chart\n            .dataSources\n            .forEach(dataSource => {\n                const timerID = setInterval(\n                    () => this.fetchData(dataSource),\n                    1000 / dataSource.sampleFrequency\n                );\n\n                this.dataSourceRequestTimer.push(timerID);\n            });\n    }\n\n    componentDidMount = () => {\n        fetchChart(parseInt(this.props.match.params.id))\n        .then(chart => {\n            this.setState({\n                chart: chart,\n            });\n        })\n        .catch(error => {\n            NotificationManager.error(\"Could not load Chart!\");\n        });\n    }\n\n    componentWillUnmount = () => {\n        this.dataSourceRequestTimer.forEach(clearInterval);\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    fetchBar = (dataSource: IDataSource) => {\n        if (!this.lastDataFetched.has(dataSource.id))\n            this.lastDataFetched.set(dataSource.id, new Date());\n\n        fetch.data(dataSource, this.lastDataFetched.get(dataSource.id))\n        .then(data => {\n            const dataSamples = data.data;\n            dataSamples.forEach(sample => sample.x = sample.x.toString());\n\n            this.lastDataFetched.set(dataSource.id, new Date());\n            this.notifyAll(data)\n        })\n        .catch(err => console.log(err));\n    }\n\n    fetchTimeseries = (dataSource: IDataSource) => {\n        if (!this.lastDataFetched.has(dataSource.id))\n            this.lastDataFetched.set(dataSource.id, new Date());\n\n        fetch.data(dataSource, this.lastDataFetched.get(dataSource.id))\n        .then(data => {\n            const dataSamples = data.data;\n            const lastDate = data.data[data.data.length - 1].x as Date;\n            dataSamples.forEach(sample => sample.x = new Date(sample.x));\n\n            this.lastDataFetched.set(dataSource.id, lastDate);\n            this.notifyAll(data)\n        })\n        .catch(err => console.log(err));\n    }\n\n    /**\n     * Esta função é responsável por obter os dados da fonte de dados. Cada\n     * fonte de dados possui uma frequência de requisição específica e,\n     * portanto, a frequência de requisições enviadas a uma fonte de dados espe-\n     * cífica deve estar de acordo com essa frequência.\n     */\n    fetchData = (dataSource: IDataSource) => {\n        if (this.state.chart.chartType !== \"Bar Chart\")\n            this.fetchTimeseries(dataSource);\n        else\n            this.fetchBar(dataSource);\n    }\n\n    /**\n     * Esta função adiciona uma fonte de dados na lista de componentes que\n     * desejam receber os dados provinientes das fontes de dados.\n    */\n    subscribe = (callback: (data: IChartInputType) => any) => {\n        this.subscribers.push(callback);\n    }\n\n    /**\n     * Esta função passa o parâmetro para todos os subscribers.\n     */\n    notifyAll(data: IChartInputType) {\n        this.subscribers.forEach(subscriber => subscriber(data));\n    }\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n    render() {\n        if (this.state.chart == null) return null;\n        this.startSampling();\n        return (\n        <div className=\"container mt-3\">\n            <Graph\n                subscripton={this.subscribe}\n                chart={this.state.chart}\n                width={\"100%\"}\n                height={600}/>\n            { this.state.chart.chartType !== \"Bar Chart\"   ?\n                <Statistic subscripton={this.subscribe} /> :\n                null\n            }\n        </div>\n        );\n    }\n}","import React, {Component, RefObject} from \"react\";\n\nimport {NotificationManager} from \"react-notifications\";\n\ninterface IProps {\n    defaultImage: string;\n    onSelected: (image: File) => void;\n}\n\ninterface IState {\n\n}\n\nexport class AvatarPreview extends Component<IProps, IState> {\n    avatar: RefObject<HTMLInputElement>;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.avatar = React.createRef();\n    }\n\n    // Mostra a imagem que o usuário selecionou como avatar.\n    showAvatar = () => {\n        const fileReader = new FileReader();\n        const files = this.avatar.current.files;\n\n        // Notifica via callback a imagem escolhida.\n        if (files[0].type.startsWith(\"image/\")) {\n            this.props.onSelected(this.avatar.current.files[0]);\n        } else {\n            NotificationManager.error(\"Please, select a picture!\");\n            return;\n        }\n\n        // Exibe a imagem.\n        fileReader.readAsDataURL(files[0]);\n        fileReader.onload = (e) => {\n            const img = document.getElementById(\"avatarPreview\");\n            const result = (e.target as FileReader).result;\n            img.setAttribute(\"src\", result as string);\n        }\n    }\n\n    render = () => {\n\n        return (\n        <>\n            <div>\n                <label htmlFor=\"customFile\">\n                    <img\n                        className=\"preview\"\n                        src={this.props.defaultImage}\n                        id=\"avatarPreview\">\n                    </img>\n                </label>\n            </div>\n            <input\n                type=\"file\"\n                className=\"custom-file-input\"\n                id=\"customFile\"\n                ref={this.avatar}\n                onChange={this.showAvatar}\n            />\n        </>);\n    }\n}","import React, {Component, RefObject, createRef} from \"react\";\nimport { AvatarPreview } from \"../Components/AvatarPreview\";\nimport { IUser } from \"../Types/UserType\";\n\nimport {NotificationManager} from \"react-notifications\";\nimport { getUserData, updateUserData } from \"../Comunication/Login\";\nimport { Button, FormGroup } from \"react-bootstrap\";\nimport Form from \"react-bootstrap/FormGroup\";\n\n\ninterface IProps {}\ninterface IState {\n    avatar?: File;\n    user?: IUser;\n}\n\nexport class Home extends Component<IProps, IState> {\n    name    : RefObject<HTMLInputElement>;\n    password: RefObject<HTMLInputElement>;\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state    = {};\n        this.name     = createRef();\n        this.password = createRef();\n    }\n\n    componentDidMount = () => {\n        getUserData()\n        .then(userData => this.setState({user: userData as IUser}))\n        .catch(error => {\n            NotificationManager.error(\"Could not get user data.\")\n        });\n    }\n\n    // Altera o avatar do usuário quando a imagem for selecionada.\n    setAvatar = (file: File) => {\n        this.setState({\n            avatar: file,\n        });\n    }\n\n    // Obtém os dados dos demais campos.w-75\n    extractData = () => {\n        const name = this.name.current.value;\n        const password = this.password.current.value;\n\n        const data = new FormData();\n        data.set(\"id\", this.state.user.id.toString());\n        data.set(\"name\", name);\n\n        if (password.length > 7)\n            data.set(\"password\", password);\n\n        // this.state.avatar != this.state.uer.avatar\n        // O primeiro é uma imagem, já o último é uma url.\n        if (this.state.avatar)\n            data.set(\"avatar\", this.state.avatar);\n\n        return data;\n    }\n\n    // Envia os dados para o servidor.\n    update = () => {\n        const updatedData = this.extractData();\n        updateUserData(updatedData)\n        .then(userUpdated => {\n            console.log(userUpdated);\n        })\n        .catch(error => {\n\n        });\n    }\n\n    render = () => {\n        if (!this.state.user) return null;\n        return (<>\n            <Form>\n            <div className=\"container mt-3 text-black w-50\">\n                <div className=\"gap\"/>\n                <h3>Change Avatar</h3>\n                <label>Avatar:</label>\n                <AvatarPreview\n                    onSelected={this.setAvatar}\n                    defaultImage={this.state.user.avatar}/>\n                <div className=\"gap\"/>\n                <h3>Change Name</h3>\n                <FormGroup>\n                    <label>Name:</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        style={{textAlign: \"center\"}}\n                        ref={this.name}\n                        defaultValue={this.state.user.name} />\n                </FormGroup>\n\n                <div className=\"gap\"/>\n                <h3>Change Password</h3>\n                <FormGroup>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        className=\"form-control\"\n                        ref={this.password}\n                        style={{textAlign: \"center\"}}/>\n                </FormGroup>\n                <div className=\"gap\"/>\n                <Button\n                    onClick={this.update}>\n                    Save\n                </Button>\n            </div>\n            </Form>\n        </>);\n    }\n}","import React      from 'react'                  ;\nimport Chart      from \"./Chart/ChartView\"          ;\nimport DataSource from \"./DataSource/DataSourceView\";\n\nimport { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\nimport {Router} from \"react-router\";\n\nimport \"./Styles/style.css\";\nimport \"./Styles/chart-card.css\";\nimport \"./Styles/chart-comp-style.css\";\nimport \"./Styles/datasource-card.css\";\nimport \"./Styles/statistic-style.css\";\nimport 'react-notifications/lib/notifications.css';\nimport { LoginScreen } from './Login/LoginScreen';\nimport {Menus} from './Menus';\nimport { Intro } from './Intro';\nimport DisplaySensor from './Chart/DisplaySensor';\nimport { createBrowserHistory } from 'history';\nimport { Home } from './Home/Home';\n\n/* ────────────────────────────────────────────────────────────────────────── */\n\n// A interface IProps.\ninterface IProps {\n\n};\n\n// A interface IState.\ninterface IState extends IProps {\n\n};\n\n\nexport default class App extends React.Component<IProps, IState> {\n    state: IState;\n    history = createBrowserHistory();\n\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { ...props };\n    }\n\n    render = () => (\n        <Router history={this.history}>\n            <Switch>\n                <Route exact path  = \"/\"  component = {Intro} />\n                <Route path  = \"/login\" component = {LoginScreen} />\n                <Route path  = \"/*\"  component = {Menus} />\n            </Switch>\n            <div className=\"viewport\">\n                <Route path=\"/home\"              component={Home}/>\n                <Route path=\"/datasource\"       component={DataSource} />\n                <Route path=\"/chart\"      exact component={Chart} />\n                <Route path=\"/chart/:id\"        component={DisplaySensor} />\n            </div>\n        </Router>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./Styles/style.css\";\nimport \"./Styles/chart-card.css\";\nimport \"./Styles/chart-comp-style.css\";\nimport \"./Styles/datasource-card.css\";\nimport \"./Styles/statistic-style.css\";\n\nfunction BootstrapApp() {\n    return (<>\n        <BrowserRouter\n            basename={\"/\"}\n            forceRefresh={true}>\n            <App/>\n        </BrowserRouter>\n    </>);\n}\n\nReactDOM.render(<BootstrapApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}